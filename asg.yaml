AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation for VPC'
Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '175.16.0.0/16'
      EnableDnsSupport: true 
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVpc
# Public Subnet AZ1A:
  PublicSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A
#Private ApplicationSubnet AZ1A:
  AppPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref myVPC
      CidrBlock: '175.16.16.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A
  #Public Database Subnet AZ1A:
  DataPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.32.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1A
  #Public Subnet AZ2B:
  PublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B
#AppPrivateSubnet AZ2B:
  AppPublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.48.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppPublicSubnet2B
  #DataPrivateSubnet AZ2B:
  DataPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.64.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B
#Internet Gateway:
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name 
          Value: MyVPC-IGW
#Internet Gateway Attachment:
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

# Creating a Route Table:
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
# Creating a default Public Route:
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
# Creating PublicSubnet1A Route Table Association:
  PublicSubnet1ARouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1A
# Creating PublicSubnet2B Route Table Association:
  PublicSubnet2BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2B
# Web Server/ ALB Security Group:
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP from ASG'
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
# Lanch Config
  MyLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-04fdea8e25817cd69'
      InstanceType: t2.micro
      SecurityGroups: 
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello from Auto Scaling CloudFormation</h1></body></html>" > /var/www/html/index.html
  #ASG
  MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfig
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1A
        - !Ref AppPublicSubnet2B
#Alarm
  HighCPUAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alarm when CPU exceeds 70%'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
        - !Ref ScaleOutPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
#Scale Out Policy:
  ScaleOutPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: 'SimpleScaling'
      AdjustmentType: ChangeInCapacity
      Cooldown: '300'
      ScalingAdjustment: 1
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation for VPC'
Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '175.16.0.0/16'
      EnableDnsSupport: true 
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVpc
# Public Subnet AZ1A:
  PublicSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A
#Private ApplicationSubnet AZ1A:
  AppPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      VpcId: !Ref myVPC
      CidrBlock: '175.16.16.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A
  #Public Database Subnet AZ1A:
  DataPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.32.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1A
  #Public Subnet AZ2B:
  PublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B
#AppPrivateSubnet AZ2B:
  AppPublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.48.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppPublicSubnet2B
  #DataPrivateSubnet AZ2B:
  DataPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: '175.16.64.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B
#Internet Gateway:
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name 
          Value: MyVPC-IGW
#Internet Gateway Attachment:
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

# Creating a Route Table:
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
# Creating a default Public Route:
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
# Creating PublicSubnet1A Route Table Association:
  PublicSubnet1ARouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1A
# Creating PublicSubnet2B Route Table Association:
  PublicSubnet2BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2B
# Bastion Host EC2:
  BastionHS:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: Bash
      ImageId: ami-04fdea8e25817cd69
      SubnetId: !Ref PublicSubnet1A
      Tags:
        - Key: Name
          Value: BastionHS
      SecurityGroupIds:
        - !Ref BastionSG
  #Bastion Securty Group:
  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allowing SHH access'
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '67.188.49.63/32'
      Tags:
        - Key: Name
          Value: BastionSG
  #AppIntance1A:
  AppInstance1A:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-04fdea8e25817cd69
      InstanceType: t2.micro
      KeyName: Bash
      SubnetId: !Ref AppPrivateSubnet1A
      Tags:
        - Key: Name
          Value: AppInstance1A
      SecurityGroupIds:
        - !Ref AppInstance1ASG
  #AppIntance2B:
  AppInstance2B:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-04fdea8e25817cd69
      InstanceType: t2.micro
      KeyName: Bash
      SubnetId: !Ref AppPrivateSubnet1A
      Tags:
        - Key: Name
          Value: AppInstance2B
      SecurityGroupIds:
        - !Ref AppInstance2BSG
#SG app1a
  AppInstance1ASG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Ssh from Bastion Host to P1'
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: Name
          Value: AppInstance1ASG
#SG app2a
  AppInstance2BSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ICMP  from Pv1 to Pv2'
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref AppInstance1ASG
      Tags:
        - Key: Name
          Value: AppInstance2BSG